-(5:20)
select(cran,X:size)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparision
?Comparison
filter(cran,r_version == "3.0.2", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country =="IN")
filter(cran, size>100500 & r_os="linux-gnu")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
cran3
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
quit()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
View(cran)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="Oaker", secret="verba307")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="Oaker", secret="verba307")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token(github, my app)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token(github, myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
github<-oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token(github, myapp)
github
github_token <- oauth2.0_token(github$authorize, myapp)
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token("https://github.com/login/oauth/authorize", myapp)
github_token <- oauth2.0_token(github, myapp)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
github<-oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token(github, myapp)
library(httpuv)
install.packages("httpuv")
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
github<-oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key="1aa6befd2e2dfb7b0b67", secret="e5e3d9a21c91900c86e82a25524179c68c8f8ba7")
github_token <- oauth2.0_token(github, myapp)
library(httr)
library(httpuv)
lkey<-"78s6ded9xt2afb"
lsecret<-"YvWYeN5szDf3T8BP"
# 1. Find OAuth settings for linkedin:
linkedin<-oauth_endpoints("linkedin")
# 2. Register an application
myapp <- oauth_app("ProgramR", key=lkey, secret=lsecret)
ltoken <- oauth2.0_token(linkedin, myapp)
req<-GET ("https://api.linkedin.com/v1/people/~")
?t.test
?qt
?qnorm
pvals <- seq(.5, .99, by = .01)
qt(pvals)
?qt
?rnorm
g1<-rnorm(9,1100,30)
g2<-rnorm(9,1100,30)
d<-g1-g2
t.test(d)
g2<-rnorm(9,mean=1100,sd=30)
g1<-rnorm(9,mean=1100,sd=30)
d<-g1-g2
d<g1-g2
d<-(g1-g2)
d
t.test(d)
t.test(d)$confidence
t.test(d)$conf
t.test(g2,g1)$conf
t.test(g2,g1,paired=F)$conf
t.test(g2,g1,paired=T)$conf
t.test(d)$conf
1100+t.test(d)$conf
g1<-rnorm(9,mean=1100,sd=30)
g2<-rnorm(9,mean=1100,sd=30)
1100+t.test(g1,g2)$conf
1100+t.test(g1,g2,paired=F)$conf
1100+t.test(g1,g2,paired=T)$conf
1100+t.test(g1,g2,paired=F)$conf
t.test(g1)
t.test(g2)
g2<-rnorm(100,mean=1100,sd=30)
t.test(g2)
g2<-rnorm(9,mean=1100,sd=30)
t.test(g2)
g2<-rnorm(9,mean=1100,sd=30)
t.test(g2)
g2<-rnorm(9,mean=1100,sd=30)
t.test(g2)
g2<-rnorm(9,mean=1100,sd=30)
t.test(g2)
round(qt(.95, df = 8) * -1 / 3, 2)
round(qt(.95, df = 8) * 1 / 3, 2)
round(qt(.95, df = 8) * 2 / 3, 2)
round(qt(.975, df = 8) * 2 / 3, 2)
round(qt(.975, df = 8) * -2 / 3, 2)
library(swirl)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
View(ToothGrowth)
head(ToothGrowth,3)
str(ToothGrowth)
help(ToothGrowth)
?hist
hist(ToothGrowth$len)
ToothGrowth$dose
plot(ToothGrowth$dose,ToothGrowth$len)
plot(ToothGrowth$len,ToothGrowth$dose)
??plot
?plot
plot(ToothGrowth$len,ToothGrowth$dose,col=ToothGrowth$supp)
plot(avg(ToothGrowth[ToothGrowth$supp="VC".len]),ToothGrowth$dose,col=ToothGrowth$supp)
plot(avg(ToothGrowth[ToothGrowth$supp="VC","len"]),ToothGrowth$dose,col=ToothGrowth$supp)
plot(avg(ToothGrowth[ToothGrowth$supp=="VC","len"]),ToothGrowth$dose,col=ToothGrowth$supp)
plot(ToothGrowth$dose,ToothGrowth$len),col=ToothGrowth$supp)
plot(ToothGrowth$dose,ToothGrowth$len,col=ToothGrowth$supp)
plot(ToothGrowth$dose,avg(ToothGrowth$len),col=ToothGrowth$supp)
plot(ToothGrowth$dose,mean(ToothGrowth$len),col=ToothGrowth$supp)
plot(x=ToothGrowth$dose,y=mean(ToothGrowth$len),col=ToothGrowth$supp)
?qplot
??qplot
??ggplot2:qplot
??ggplot2::qplot
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+qplot(data=ToothGrowt,lm(dose))
qplot(data=ToothGrowt,lm(dose))
library(ggplot2)
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
qplot(data=ToothGrowt,lm(dose))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
qplot(data=ToothGrowth,lm(dose))
qplot(data=ToothGrowth,lm(dose))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
lines(data=ToothGrowth,lm(dose))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
lines(data=ToothGrowth,lm(ToothGrowth$dose))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
lines(data=ToothGrowth,mean(ToothGrowth$dose))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)+
lines(mean(ToothGrowth$dose))
?lines
??ggplot2::qplot
qplot(data=ToothGrowth,dose,mean(len),colour=supp,facets=.~supp)
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp)
qplot(data=ToothGrowth,len~dose)
qplot(data=ToothGrowth,len ~ dose + supp)
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp,geom
=c("point","smooth")))
qplot(data=ToothGrowth,dose,len,colour=supp,facets=.~supp,geom
=c("point","smooth"))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth"))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
="point")
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth"),method=x)
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth",method=x))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","x"))
??geom
??geom
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth","auto"))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth","auto"))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth","x"))
qplot(data=ToothGrowth,dose,len,colour=supp,geom
=c("point","smooth"),method="lm")
?geom_smooth
qplot(ToothGrowth$len,facets=.~supp)
qplot(ToothGrowth$len,facets=.~ToothGrowth$supp)
head(ToothGrowth,3)
qplot(data=ToothGrowth,ToothGrowth,fill=supp)
qplot(data=ToothGrowth,len,fill=supp)
qplot(data=ToothGrowth,len,fill=supp,binwidth=1)
qplot(ToothGrowth$dose)
qplot(data=ToothGrowth,len,fill=supp,binwidth=1)
summary(ToothGrowth[ToothGrowth$supp="OJ",])
summary(ToothGrowth[ToothGrowth$supp=="OJ",])
View(ToothGrowth)
?t.test()
t.test(ToothGrowth[ToothGrowth$supp=="OJ","len"],ToothGrowth[ToothGrowth$supp=="VC","len",paired = FALSE)
t.test(ToothGrowth[ToothGrowth$supp=="OJ","len"],ToothGrowth[ToothGrowth$supp=="VC","len"],paired = FALSE)
t.test(ToothGrowth[ToothGrowth$supp=="OJ","len"],ToothGrowth[ToothGrowth$supp=="VC","len"],paired = FALSE)$conf.int
t.test(data=d1,paired=FALSE,len ~ supp)
d1 <- subset(ToothGrowth, dose == 0.5)
d2 <- subset(ToothGrowth, dose == 1.0)
d3 <- subset(ToothGrowth, dose == 2.0)
t.test(data=d1,paired=FALSE,len ~ supp)
t.test(data=d1,paired=FALSE,len ~ supp)$conf.int
t.test(data=d1,paired=FALSE,len ~ supp)$conf.int
t.test(data=d2,paired=FALSE,len ~ supp)$conf.int
t.test(data=d3,paired=FALSE,len ~ supp)$conf.int
d1 <- subset(ToothGrowth, dose == 0.5)
d2 <- subset(ToothGrowth, dose == 1.0)
d3 <- subset(ToothGrowth, dose == 2.0)
t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int
t.test(data=d3,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int
matrix(c(t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d3,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int),3,2)
conf<-matrix(c(t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d3,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int),3,2)
names(conf)<-c("min_mean","max_mean")
conf
names(conf)
conf<-data.frame(c(t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d3,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int),3,2)
conf
dim(conf)<-3,2
dims(conf)<-3,2
names(Conf)
names(conf)
class(conf)
str(conf)
??data.frame
conf<-matrix(c(t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(data=d3,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int),3,2)
View(conf)
conf
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"],ToothGrowth$len[ToothGrowth$supp=="VC"],paired=FALSE,ver.equal=FALSE)$conf
conf<-t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"],ToothGrowth$len[ToothGrowth$supp=="VC"],paired=FALSE,ver.equal=FALSE)$conf
conf[1]
t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int
t.test(data=d1,paired=FALSE,len ~ supp)$conf.int
t.test(data=d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
d1
d2
d3
t.test(d1,d2,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int,
t.test(d1,d2,paired=FALSE)$conf.int,
t.test(d1,d2,paired=FALSE)$conf.int
t.test(data=d1,paired=FALSE,var.equal = FALSE,len ~ supp)$conf.int
t.test(data=d1,paired=FALSE,var.equal = FALSE)$conf.int
t.test(d1-d2,paired=FALSE,var.equal = FALSE)$conf.int
d1-d2
d1$len
t.test(d1$len,d2$len,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d1$len,d2$len,paired=FALSE,var.equal = FALSE)
conf<-matrix(c(
t.test(d1,d2,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d2,d3,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d1,d2,paired=FALSE,var.equal = FALSE)$conf.int),3,2)
t.test(d1,d2,paired=FALSE,var.equal = FALSE)$conf.int
t.test(d1,d2,paired=FALSE)$conf.int
d1
d2
conf<-matrix(c(
t.test(d1$len,d2$len,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d2$len,d3$len,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d1$len,d3$len,paired=FALSE,var.equal = FALSE)$conf.int),3,2)
conf
conf<-matrix(c(
t.test(d1$len,d2$len,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d3$len,d2$len,paired=FALSE,var.equal = FALSE)$conf.int,
t.test(d3$len,d1$len,paired=FALSE,var.equal = FALSE)$conf.int),3,2)
conf
??connetion
??bzip
??bzunzip
??unzip
bzunizp
bzunzip
??bz2unzip
??bzunzip
ans <- round(pbinom(54, prob = .5, size = 100, lower.tail = FALSE),4
)
round(pbinom(54, prob = .5, size = 100, lower.tail = FALSE),4)
round(pbinom(4, prob = 3/4, size = 4, lower.tail = FALSE),4)
pbinom(2,size=4,prob=3/4,lower.tail=FALSE)
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
??hist
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
?rpois
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
class(distr)
distr=="Exponential"
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='oaker',
token='A9757391E80A52A9F18C114DE7C0C19D',
secret='<SECRET>')
shinyapps::setAccountInfo(name='oaker', token='A9757391E80A52A9F18C114DE7C0C19D', secret='swXidJZfhk1W/FjRKL5EmxECObum9p/M8zTW9H1l')
deployApp()
library(shinyapps)
deployApp()
deployApp('e://program//productcourse')
deployApp()
setwd("e//program//productcourse")
setwd("e://program//productcourse")
setwd("e://program//productcourse")
library(shinyapps)
shinyapps::setAccountInfo(name='oaker', token='A9757391E80A52A9F18C114DE7C0C19D', secret='swXidJZfhk1W/FjRKL5EmxECObum9p/M8zTW9H1l')
deployApp()
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
shiny::runApp('E:/program/ProductCourse')
